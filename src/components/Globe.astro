---
import 'mapbox-gl/dist/mapbox-gl.css';
interface Props {
  lng: number;
  lat: number;
  zoom: number;
  mapstyle: string;
  bearing: number;
  pitch?: number;
  accesstoken: string;
  interactive?: boolean;
  sec?: number;
}
const { lng, lat, zoom, mapstyle, bearing, pitch = 0, accesstoken, interactive = false, sec} = Astro.props;

---

<div transition:persist id="map"/>
<mapbox-map
    transition:persist
    data-lat={lat}
    data-lng={lng}
    data-zoom={zoom}
    data-mapstyle={mapstyle}
    data-bearing={bearing}
    data-pitch={pitch}
    data-accesstoken={accesstoken}
    data-interactive={interactive}
    data-sec={sec}
/>

<script>
    import mapboxgl from "mapbox-gl"
    class MapboxMap extends HTMLElement {
        constructor() {
            super()
            mapboxgl.accessToken = this.dataset.accesstoken
            const map = new mapboxgl.Map({
                container: 'map',
                projection: 'globe',
                center: [this.dataset.lng, this.dataset.lat],
                interactive: this.dataset.interactive,
                bearing: this.dataset.bearing,
                pitch: this.dataset.pitch,
                zoom: this.dataset.zoom,
                style: this.dataset.mapstyle
            })
            map.on('moveend', () => {
                this.spinGlobe(map);
            });
            this.spinGlobe(map);
        }

        spinGlobe(map) {
            let cnt = map.getCenter();
            cnt.lng -= 360 / Number(this.dataset.sec);
            map.easeTo({ center: cnt, duration: 1000, easing: (n) => n });
        }
    } 
    customElements.define("mapbox-map", MapboxMap);
</script>

<style>
    #map {
        /* mix-blend-mode: screen; */
        height: 100%;
        width: 100vw;
        position: fixed;
        top: 0;
        z-index: -1;
    }
</style>