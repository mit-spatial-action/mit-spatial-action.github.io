---
import 'mapbox-gl/dist/mapbox-gl.css';

import { type GlobeModel } from '@ts/Models'

interface Props extends GlobeModel {
    accesstoken: string;
}

const { lng, lat, zoom, style, bearing, pitch = 0, accesstoken, color = "#ffffff", linewidth = 0.1, linework = false, interactive = false, sec = 8000} = Astro.props;


---

<div transition:persist id="map"/>
<mapbox-map
    transition:persist
    data-lat={lat}
    data-lng={lng}
    data-zoom={zoom}
    data-style={style}
    data-bearing={bearing}
    data-pitch={pitch}
    data-accesstoken={accesstoken}
    data-color={color}
    data-linewidth={linewidth}
    data-linework={Number(linework)}
    data-interactive={Number(interactive)}
    data-sec={sec}
/>

<script>
    import { type MapBoxLayerModel } from '@ts/Models'
    import mapboxgl from "mapbox-gl"
    import * as stylesRaw from 'src/sass/_variables.module.scss';
    interface Style {
        success: string;
        danger: string;
        link: string;
        info: string;
        dark: string;
        "shadow-offset": string;
    }
    const styles:Style = Object(stylesRaw);

    class MapboxMap extends HTMLElement {
        constructor() {
            super()
            mapboxgl.accessToken = this.dataset.accesstoken
            const map = new mapboxgl.Map({
                container: 'map',
                projection: 'globe',
                center: [this.dataset.lng, this.dataset.lat],
                interactive: Boolean(this.dataset.interactive),
                bearing: this.dataset.bearing,
                pitch: this.dataset.pitch,
                zoom: this.dataset.zoom
            })

            map.setStyle(this.dataset.style);

            map.on('load', () => {
                this.removeMB(map);
            })

            if (Boolean(this.dataset.linework)) {
                map.on('style.load', () => {
                    this.lineWork(map);
                })
            }
            map.on('moveend', () => {
                this.spinGlobe(map);
            });
            this.spinGlobe(map);
        }

        removeMB(map) {
            interface SelectedElement extends Element{
                style: CSSStyleDeclaration;
            }
            let ctrl:SelectedElement = document.querySelector('.mapboxgl-ctrl')
            ctrl.style["display"] = "none";
        }

        lineWork(map) {
            const layers = map.getStyle().layers;
            Object.entries(layers).forEach((s:MapBoxLayerModel) => {
                if (s[1].type == "line") {
                        map.setPaintProperty(s[1].id, 'line-color', styles.danger);
                        map.setPaintProperty(s[1].id, 'line-width', Number(this.dataset.linewidth));
                }
                if (s[1].type == "fill") {
                    map.removeLayer(s[1].id)
                    let id = s[1]['source-layer'].concat("-manual-line");
                    if(!map.getLayer(id)) {
                        map.addLayer({
                            id: id,
                            source: s[1].source,
                            "source-layer": s[1]['source-layer'],
                            type: "line"
                        })
                        map.setPaintProperty(id, 'line-color', styles.danger);
                        map.setPaintProperty(id, 'line-width', Number(this.dataset.linewidth));
                    }
                }
                if (['symbol', 'background'].includes(s[1].type) || s[1].id.includes('-case')) {
                    map.removeLayer(s[1].id)
                }
            })
        }

        spinGlobe(map) {
            let cnt = map.getCenter();
            cnt.lng -= 360 / Number(this.dataset.sec);
            map.easeTo({ center: cnt, duration: 1000, easing: (n) => n });
        }
    } 
    customElements.define("mapbox-map", MapboxMap);
</script>

<style>
    #map {
        /* mix-blend-mode: screen; */
        height: 100%;
        width: 100vw;
        position: fixed;
        top: 0;
        z-index: -1;
    }
</style>